// Code generated by musgen-go. DO NOT EDIT.

package server_streaming

import (
	dts "github.com/mus-format/mus-stream-dts-go"
	muss "github.com/mus-format/mus-stream-go"
	"github.com/mus-format/mus-stream-go/ord"
)

var SayFancyHelloMultiCmdMUS = sayFancyHelloMultiCmdMUS{}

type sayFancyHelloMultiCmdMUS struct{}

func (s sayFancyHelloMultiCmdMUS) Marshal(v SayFancyHelloMultiCmd, w muss.Writer) (n int, err error) {
	return ord.String.Marshal(v.str, w)
}

func (s sayFancyHelloMultiCmdMUS) Unmarshal(r muss.Reader) (v SayFancyHelloMultiCmd, n int, err error) {
	v.str, n, err = ord.String.Unmarshal(r)
	return
}

func (s sayFancyHelloMultiCmdMUS) Size(v SayFancyHelloMultiCmd) (size int) {
	return ord.String.Size(v.str)
}

func (s sayFancyHelloMultiCmdMUS) Skip(r muss.Reader) (n int, err error) {
	n, err = ord.String.Skip(r)
	return
}

var SayFancyHelloMultiCmdDTS = dts.New[SayFancyHelloMultiCmd](SayFancyHelloMultiCmdDTM, SayFancyHelloMultiCmdMUS)

var ResultMUS = resultMUS{}

type resultMUS struct{}

func (s resultMUS) Marshal(v Result, w muss.Writer) (n int, err error) {
	n, err = ord.String.Marshal(v.str, w)
	if err != nil {
		return
	}
	var n1 int
	n1, err = ord.Bool.Marshal(v.lastOne, w)
	n += n1
	return
}

func (s resultMUS) Unmarshal(r muss.Reader) (v Result, n int, err error) {
	v.str, n, err = ord.String.Unmarshal(r)
	if err != nil {
		return
	}
	var n1 int
	v.lastOne, n1, err = ord.Bool.Unmarshal(r)
	n += n1
	return
}

func (s resultMUS) Size(v Result) (size int) {
	size = ord.String.Size(v.str)
	return size + ord.Bool.Size(v.lastOne)
}

func (s resultMUS) Skip(r muss.Reader) (n int, err error) {
	n, err = ord.String.Skip(r)
	if err != nil {
		return
	}
	var n1 int
	n1, err = ord.Bool.Skip(r)
	n += n1
	return
}

var ResultDTS = dts.New[Result](ResultDTM, ResultMUS)
